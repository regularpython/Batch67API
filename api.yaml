openapi: 3.0.3
info:
  title: User Management API
  description: API documentation for managing user records (create, retrieve, update, delete).
  version: 1.0.0

servers:
  - url: http://127.0.0.1:3000
    description: Local development server

paths:
  /user/create:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                age:
                  type: integer
              required:
                - name
                - email
                - age
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /user/get-details:
    get:
      summary: Get all users
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'

  /user/get-user:
    get:
      summary: Get a single user by ID
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Single user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /user/delete/{user_id}:
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - in: header
          name: api-key
          required: false
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  deleted user_id:
                    type: string

  /user/update:
    put:
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    $ref: '#/components/schemas/User'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        age:
          type: integer
